A simple text-query program.
Our program: let a user search a given file for words that might occur in it.
The result of a query will be the number of times the word occurs and a list of lines on which
that word appears.

e.g.:Target:


////
A good way to start the design of a program is to list the program's operations. Knowing what operations we need can help
is see waht data structures we'll need.
Starting from requirements, the tasks our program must do include the following:
When it reads the input, the program must remember the line(s) in which each word appears. Hence, the program will need to read the input
a line at a time and break up the lines from the input file into spearate words.

When it generates output,
1: The program must be able to fetch the line numbers associated with a given word
2: The line numbers must appear in ascending order with no duplicates
3: The program must be able to print the text appearing in the input file at a given number.

To meet these requirements, we need to:
1: use a vector<string> to store a copy of the entire input file. Each line in the input file will be an element in the vector. When we want to print a line.
we can fetch the line using its line number as the index.
2:We'll use an istringstream to break each line into words.
3: We'll use a set to hold the line numbers on which each word in the input file appears. Using a set guarantees that each line
will appear only once and that the line numbers will  be stored in ascending order.
4:We'll use a map to associate each word with the set of line numbers on which the word appears. Using a map will  let us fetch the
set for any given word.



TestQuery: holds a vector and a map.
vector: hold the text of the input file in a way that makes querying the file easy.
map: associate each word in that file to the set of line numbers on which that words appears.

QueryResult: could copy the line numbers<- expensive
copy vector<-very expensive!!!!

Return iterators or pointers->pitfall->unsynchronized
To synchronize them: shared_ptr data structure!!!

